version: 2
jobs:
  build:
    docker:
      - image: node:8
    working_directory: ~/qliktive-custom-analytics
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "test/package.json" }}
      - run:
          name: Install Dependencies - Test
          command: npm install --quiet
          working_directory: ~/qliktive-custom-analytics/test
      - run:
          name: Run ESLint
          command: npm run lint
          working_directory: ~/qliktive-custom-analytics/test
      - save_cache:
          key: dependency-cache-{{ checksum "test/package.json" }}
          paths:
            - test/node_modules
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
      - run:
          name: Validate docker-compose files
          command: npm run validate:compose
          working_directory: ~/qliktive-custom-analytics/test
      - run:
          name: Install docker client
          command: |
            curl -L -o /tmp/docker-17.06.0-dev.tgz https://master.dockerproject.org/linux/x86_64/docker-17.06.0-dev.tgz
            tar -xz -C /tmp -f /tmp/docker-17.06.0-dev.tgz
            mv /tmp/docker/* /usr/bin
      - setup_remote_docker
      - run:
          name: Login to Dockerhub
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: Deploy to remote Docker space
          command: |
            echo $GITHUB_CLIENT_ID > ~/qliktive-custom-analytics/secrets/GITHUB_CLIENT_ID
            echo $GITHUB_CLIENT_SECRET > ~/qliktive-custom-analytics/secrets/GITHUB_CLIENT_SECRET
            echo $JWT_SECRET > ~/qliktive-custom-analytics/secrets/JWT_SECRET
            echo $SLACK_WEBHOOK > ~/qliktive-custom-analytics/secrets/SLACK_WEBHOOK
            ACCEPT_EULA=yes LICENSES_SERIAL_NBR=$LICENSES_SERIAL_NBR LICENSES_CONTROL_NBR=$LICENSES_CONTROL_NBR ./local.sh deploy
      - run:
          name: Wait for deployment to come up
          command: |
            set +e

            # Check that openresty is up and running
            GATEWAY_ID=$(docker ps -aqf "name=openresty")
            RETRIES=0
            while [[ "$GATEWAY_STATUS" != "running" && $RETRIES -le 30 ]]; do
              GATEWAY_STATUS=$(docker inspect -f '{{.State.Status}}' "$GATEWAY_ID")
              echo "Gateway status is $GATEWAY_STATUS"
              sleep 1
              RETRIES=$[$RETRIES+1]
            done

            # Check that Engine is running
            ENGINE_ID=$(docker ps -aqf "name=qix-engine")
            echo "Engine container id is $ENGINE_ID"

            RETRIES=0

            while [[ "$ENGINE_STATUS" != "running" && $RETRIES -le 30 ]]; do
              ENGINE_STATUS=$(docker inspect -f '{{.State.Status}}' "$ENGINE_ID")
              echo "Engine status is $ENGINE_STATUS"
              sleep 2
              RETRIES=$[$RETRIES+1]
            done

            if [[ "$GATEWAY_STATUS" != "running" || "$ENGINE_STATUS" != "running"  ]]; then
              echo "Services did not reach running state."
              exit 1
            fi
      - run:
          name: Run E2E tests in remote Docker space
          command: ./run-e2e-tests-cci.sh
          working_directory: ~/qliktive-custom-analytics/scripts
      - deploy:
          name: Deploy public demo to AWS if on master branch
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              curl -L https://github.com/docker/machine/releases/download/v0.12.2/docker-machine-`uname -s`-`uname -m` > /usr/local/bin/docker-machine
              chmod +x /usr/local/bin/docker-machine
              scp -o StrictHostKeyChecking=no ubuntu@${DOCKER_AWS_MANAGER_IP}:/home/ubuntu/ap-prod-*.zip ~/
              apt-get update
              apt-get install unzip
              for i in ~/ap-prod-*.zip; do ./import-machine.sh "$i"; done;
              export DOCKER_HOST="tcp://${DOCKER_AWS_MANAGER_IP}:2376"
              export DOCKER_CERT_PATH="/root/.docker/machine/machines/${DOCKER_AWS_MANAGER_NAME}"
              export DOCKER_MACHINE_NAME=${DOCKER_AWS_MANAGER_NAME}
              scp -o StrictHostKeyChecking=no ubuntu@${DOCKER_AWS_MANAGER_IP}:/home/ubuntu/DEPLOY_SSL_* ~/qliktive-custom-analytics/secrets/
              cd ..
              # We are adding docker-compose.logging.yml file to the merged docker-compose here because our docker-compose.circleci.yml file does not contain the image for elasticsearch, only our circleci specific volumes
              ACCEPT_EULA=yes LICENSES_SERIAL_NBR=$LICENSES_SERIAL_NBR LICENSES_CONTROL_NBR=$LICENSES_CONTROL_NBR AUTH_STRATEGY="github" docker-compose -f docker-compose.yml -f docker-compose.logging.yml -f docker-compose.circleci.yml -f docker-compose.pregen-ssl.yml config > docker-compose.merged.yml
              \cp docker-compose.merged.yml docker-compose.yml

              # Check if configs was changed. If so we need to remove stack before deploying to force an update.
              CONFIGS_CHANGED=$(git log --name-status HEAD~1..HEAD configs)

              if [[ -n $CONFIGS_CHANGED ]]; then
                echo "Configuration files was changed in the last commit. Removing and redeploying stack"
                SKIP_SWARM_ENV="true" DOCKER_PREFIX="ap-prod" DOCKER_DRIVER="amazonec2" ./swarm.sh clean
              fi

              SKIP_SWARM_ENV="true" DOCKER_PREFIX="ap-prod" DOCKER_DRIVER="amazonec2" ./swarm.sh deploy
            fi
          working_directory: ~/qliktive-custom-analytics/scripts
